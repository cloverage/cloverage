(ns cloverage.instrument-test
  (:require [clojure.string :as str]
            [clojure.test :as t]
            [clojure.tools.logging :as log]
            [cloverage.instrument :as inst]
            [riddley.walk :as rw]))

(def simple-forms
  "Simple forms that do not require macroexpansion and have no side effects."
  [1
   "A STRING"
   ''("a" "simple" "list")
   [1 2 'vector 3 4]
   {:simple :map :here 1}
   #{:sets :should :work}
   '(do :expression)])

(t/deftest wrap-preserves-value
  (doseq [simple-expr simple-forms]
    (t/is (= simple-expr (rw/macroexpand-all (inst/wrap #'inst/no-instr 0 simple-expr))))
    (t/is (= (eval simple-expr) (eval (inst/wrap #'inst/nop 0 simple-expr))))))

(t/deftest correctly-resolves-macro-symbols
  ;; simply ensure that instrumentation succeeds without errors
  (t/is (inst/instrument #'inst/no-instr 'cloverage.sample.read-eval-sample)))

(defn- form-type-
  "Provide a default empty env to form-type, purely for easier testing."
  ([f] (form-type- f nil))
  ([f e] (inst/form-type f e)))

(defprotocol Protocol
  (method [this]))

(defrecord Record [foo]
  Protocol
  (method [_] foo))

(t/deftest test-form-type
  (t/is (= :atomic (form-type- 1)))
  (t/is (= :atomic (form-type- "foo")))
  (t/is (= :atomic (form-type- 'bar)))
  (t/is (= :coll (form-type- [1 2 3 4])))
  (t/is (= :coll (form-type- {1 2 3 4})))
  (t/is (= :coll (form-type- #{1 2 3 4})))
  (t/is (= :coll (form-type- (Record. 1))))
  (t/is (= :list (form-type- '(+ 1 2))))
  (t/is (= :do (form-type- '(do 1 2 3))))
  (t/is (= :list (form-type- '(loop 1 2 3)
                             {'loop 'hoop})))) ;fake a local binding

(t/deftest do-wrap-for-record-returns-record
  (t/is (= 1 (method (eval (inst/wrap #'inst/nop 0 (Record. 1)))))))

(t/deftest do-wrap-for-record-func-key-returns-func
  (t/is (= 1 ((method (eval (inst/wrap #'inst/nop 0 (Record. (fn [] 1)))))))))

(t/deftest preserves-fn-conditions
  (let [pre-fn (eval (inst/wrap #'inst/nop 0
                                '(fn [n] {:pre [(> n 0) (even? n)]} n)))]
    (t/is (thrown? AssertionError (pre-fn -1)))
    (t/is (thrown? AssertionError (pre-fn 1)))
    (t/is (= 2 (pre-fn 2))))
  (let [post-fn (eval (inst/wrap #'inst/nop 0
                                 '(fn [n] {:post [(> % 3) (even? %)]} n)))]
    (t/is (thrown? AssertionError (post-fn 1)))
    (t/is (thrown? AssertionError (post-fn 5)))
    (t/is (= 4 (post-fn 4))))
  ;; XXX: side effect, but need to test defn since we special case it
  (let [both-defn (eval (inst/wrap #'inst/nop 0
                                   '(defn both-defn [n]
                                      {:pre [(> n -1)] :post [(> n 0)]}
                                      n)))]
    (t/is (thrown? AssertionError (both-defn 0)))
    (t/is (thrown? AssertionError (both-defn -1)))
    (t/is (= 1 (both-defn 1)))))

(t/deftest test-exclude-calls
  (let [form    '(doseq [_ 100])
        wrapped (inst/do-wrap #'inst/nop 42 form {})]
    (t/is (not= form wrapped))
    (binding [inst/*exclude-calls* #{'clojure.core/doseq}]
      (let [wrapped (inst/do-wrap #'inst/nop 42 form {})]
        (t/is (= form wrapped))))))

(t/deftest test-wrap-defrecord-methods
  (let [form    (list 'defrecord 'MyRecord []
                      'Protocol
                      (list 'method []
                            (with-meta '(do-something) {:line 1337})))
        wrapped (list 'defrecord 'MyRecord []
                      'Protocol
                      (list 'method []
                            (inst/wrap #'inst/no-instr 1337 '(do-something))))]
    (t/is (not= form wrapped))
    (t/is (= wrapped
             (inst/do-wrap #'inst/no-instr 0 form nil))
          "Lines inside defrecord methods should get wrapped.")))

(defmacro my-defrecord [& args]
  `(do (defrecord ~@args)))

(t/deftest test-wrap-generated-defrecord-methods
  (t/testing "defrecord forms generated by macros such as Potemkin defrecord+ should get wrapped correctly"
    (let [form    (list 'do (list 'cloverage.instrument-test/my-defrecord 'MyRecord []
                                  'Protocol
                                  (with-meta (list 'method []
                                                   (with-meta '(do-something) {:line 1337}))
                                    {:line 1})))]
      (t/is (= `(do (do (defrecord ~'MyRecord []
                          ~'Protocol
                          ~'(method [] (cloverage.instrument/wrapm cloverage.instrument/no-instr 1337 (do-something))))))
               (inst/do-wrap #'inst/no-instr 0 form nil))))))

(t/deftest test-wrap-deftype-methods
  ;; (deftype ...) expands to (let [] (deftype* ...))
  ;; ignore the let form & binding because we're only interested in how `deftype*` gets instrumented
  (let [form (nth
              (macroexpand-1
               (list 'deftype 'MyType []
                     'Protocol
                     (list 'method []
                           (with-meta '(do-something) {:line 1337}))))
              2)
        wrapped (nth
                 (macroexpand-1
                  (list 'deftype 'MyType []
                        'Protocol
                        (list 'method []
                              (inst/wrap #'inst/no-instr 1337 '(do-something)))))
                 2)]
    (t/is (= (first form) 'deftype*)) ; make sure we're actually looking at the right thing
    (t/is (not= form wrapped))
    (t/is (= wrapped
             (inst/do-wrap #'inst/no-instr 0 form nil))
          "Lines inside deftype methods should get wrapped.")))

(t/deftest test-deftype-defrecord-line-metadata
  ;; * If an individual line in a defrecord or deftype method body has ^:line metadata, we should use that (3 in the
  ;;   test below)
  ;;
  ;; * Failing that, if the entire (method [args*] ...) form has line number metadata, we should use that (2 in the
  ;;   test below)
  ;;
  ;; * Finally, we should fall back to using the line number passed in to `wrap-deftype-defrecord-methods`
  ;; * (presumably the line of the entire `defrecord`/`deftype` form) (1 in the test below)
  (let [form    (list
                 'defrecord 'MyRecord []
                 'Protocol
                 (-> (list 'method-with-meta []
                           (with-meta '(line-with-meta) {:line 3})
                           (with-meta '(line-without-meta) nil))
                     (with-meta {:line 2}))
                 (-> (list 'method-without-meta [] (with-meta '(line-without-meta) nil))
                     (with-meta nil)))
        wrapped (list 'defrecord 'MyRecord []
                      'Protocol
                      (list 'method-with-meta []
                            (inst/wrap #'inst/no-instr 3 '(line-with-meta))
                            (inst/wrap #'inst/no-instr 2 '(line-without-meta)))
                      (list 'method-without-meta []
                            (inst/wrap #'inst/no-instr 1 '(line-without-meta))))]
    (t/is (= wrapped
             (inst/do-wrap #'inst/no-instr 1 form nil))
          "Wrapped defrecord/deftype methods should use most-specific line number metadata available.")))

(t/deftest test-instrumenting-fn-forms-preserves-metadata
  (let [form         '(.submit clojure.lang.Agent/pooledExecutor ^java.lang.Runnable (fn []))
        instrumented (rw/macroexpand-all (inst/instrument-form #'inst/no-instr nil ^{:line 1} form))]
    (t/is (= '(. clojure.lang.Agent/pooledExecutor submit (fn* ([])))
             instrumented))
    (t/testing "metadata on the fn form should be preserved"
      (t/is (= 'java.lang.Runnable
               (:tag (meta (nth instrumented 3))))))))

(t/deftest fail-gracefully-when-instrumenting
  (t/testing "If instrumenting a form fails we should log an Exception and continue instead of failing entirely."
    (let [form                   '(this-function-does-not-exist 100)
          log-messages           (atom [])
          evalled-original-form? (atom false)
          orig-eval-form         inst/eval-form]
      (with-redefs [log/log*       (fn [_ & message]
                                     (swap! log-messages conj (vec message)))
                    ;; `eval-form` should be called twice -- once with the instrumented form, which will fail, and a
                    ;; second time with an uninstrumented form.
                    ;;
                    ;; Both times would normally fail because `this-function-does-not-exist` doesn't exist, but for
                    ;; the sake of theses tests we want to pretend evaling the original form the second time around
                    ;; works normally. So for the second call just record the fact that it happened any avoid actually
                    ;; evalling it
                    inst/eval-form (fn [filename form line-hint instrumented-form]
                                     (if (identical? form instrumented-form)
                                       (reset! evalled-original-form? true)
                                       (orig-eval-form filename form line-hint instrumented-form)))]
        (t/testing "instrument-form should return uninstrumented form as-is"
          (t/is (= form
                   (inst/instrument-form #'inst/no-instr nil form))))
        (t/testing "Exception should be logged"
          (t/is (= 1
                   (count @log-messages)))
          (let [[[message-type _ message]] @log-messages]
            (t/is (= :error
                     message-type))
            (doseq [s ["Error instrumenting form"
                       "Unable to resolve symbol: this-function-does-not-exist"]]
              (t/is (str/includes? message s)
                    (str "Error message should include %s" (pr-str s))))))
        (t/testing "We should have attempted to evauluate the *original* form"
          (t/is (= true
                   @evalled-original-form?)))))))
